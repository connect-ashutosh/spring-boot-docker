name: Production Pipeline

on:
  push:
    branches:
      - main # Automatically trigger on push to main branch (production)

jobs:
  build-and-deploy-production:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    environment: 
      name: Production

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 3: Pull Docker image from registry (re-use the image built in staging)
      - name: Pull Docker image from registry
        run: |
          docker pull ${{ secrets.DOCKER_REGISTRY }}/my-app:latest

      # Step 4: Push Docker image to DigitalOcean (tagging it for production)
      - name: Push Docker image to DigitalOcean
        run: |
          docker tag ${{ secrets.DOCKER_REGISTRY }}/my-app:latest ${{ secrets.DOCKER_REGISTRY }}/my-app:production
          docker push ${{ secrets.DOCKER_REGISTRY }}/my-app:production

      # Step 5: Deploy to Production Droplet
      - name: Deploy to Production Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Log in to Docker in the Droplet
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Pull the production image
            docker pull ${{ secrets.DOCKER_REGISTRY }}/my-app:production
            
            # Stop and remove the existing container
            docker stop my-app-container || true
            docker rm my-app-container || true
            
            # Run the new container with environment variables for DB credentials
            docker run -d --name my-app-container -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
              ${{ secrets.DOCKER_REGISTRY }}/my-app:production
