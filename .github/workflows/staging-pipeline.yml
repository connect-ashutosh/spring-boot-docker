name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install HashiCorp Vault
      - name: Install Vault
        run: |
          sudo apt update && sudo apt install -y gpg wget
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install -y vault

      # Set VAULT_ADDR environment variable
      - name: Set VAULT_ADDR
        run: echo "VAULT_ADDR=${{ secrets.VAULT_SERVER }}" >> $GITHUB_ENV

      # Authenticate with Vault
      - name: Authenticate with Vault
        run: |
          export VAULT_ADDR=${{ secrets.VAULT_SERVER }}
          export VAULT_SKIP_VERIFY=true
          vault login ${{ secrets.VAULT_TOKEN }}

      # Fetch secrets from Vault
      - name: Fetch secrets from Vault
        run: |
          DOCKER_USERNAME=$(vault kv get -field=DOCKER_USERNAME secret/ci-secrets)
          DOCKER_PASSWORD=$(vault kv get -field=DOCKER_PASSWORD secret/ci-secrets)
          DOCKER_REGISTRY=$(vault kv get -field=DOCKER_REGISTRY secret/ci-secrets)

          # Set the secrets as environment variables for later steps
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=$DOCKER_REGISTRY" >> $GITHUB_ENV

      # Run Trivy vulnerability scanner on the code repository
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-repo-results.sarif'
          severity: 'CRITICAL'

      # Build Docker image from Dockerfile
      - name: Build Docker image
        run: |
          docker build \
            -t $DOCKER_REGISTRY/my-app:${{ github.sha }} \
            -t $DOCKER_REGISTRY/my-app:latest \
    
      

      # Combine SARIF files
      - name: Combine SARIF files
        run: |
          jq -s 'add' trivy-repo-results.sarif > combined-results.sarif

      # Upload combined SARIF file to GitHub Security tab
      - name: Upload combined SARIF file to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'combined-results.sarif'

      # Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login $DOCKER_REGISTRY -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Push Docker image to DigitalOcean
      - name: Push Docker image to DigitalOcean
        run: |
          docker push $DOCKER_REGISTRY/my-app:${{ github.sha }}
          docker push $DOCKER_REGISTRY/my-app:latest
