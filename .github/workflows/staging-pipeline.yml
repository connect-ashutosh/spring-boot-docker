name: CI/CD Pipeline

on:
  push:
    branches:
      - staging  # Trigger on pushes to the staging branch
  pull_request:
    branches:
      - staging  # Trigger on PRs to the staging branch

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Run Trivy vulnerability scanner on the code repository
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-repo-results.sarif'
          severity: 'CRITICAL'

      # Build Docker image from Dockerfile
      - name: Build Docker image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_REGISTRY }}/my-app:${{ github.sha }} \
            -t ${{ secrets.DOCKER_REGISTRY }}/my-app:latest \
            .

      # Run Trivy vulnerability scanner on Docker image
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.DOCKER_REGISTRY }}/my-app:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      # Combine SARIF files
      - name: Combine SARIF files
        run: |
          jq -s 'add' trivy-repo-results.sarif trivy-image-results.sarif > combined-results.sarif

      # Upload combined SARIF file to GitHub Security tab
      - name: Upload combined SARIF file to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'combined-results.sarif'

      # Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Push Docker image to DigitalOcean
      - name: Push Docker image to DigitalOcean
        run: |
          docker push ${{ secrets.DOCKER_REGISTRY }}/my-app:${{ github.sha }}
          docker push ${{ secrets.DOCKER_REGISTRY }}/my-app:latest

      # Install Vault CLI
      - name: Install Vault CLI
        run: |
          curl -o vault.zip https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip
          unzip vault.zip
          sudo mv vault /usr/local/bin/
          chmod +x /usr/local/bin/vault

      # Authenticate with Vault and retrieve secrets
      - name: Fetch secrets from Vault
        run: |
          # Set Vault variables
          VAULT_ROLE_ID="${{ secrets.VAULT_ROLE_ID }}"
          VAULT_SECRET_ID="${{ secrets.VAULT_SECRET_ID }}"
          VAULT_ADDR="${{ secrets.VAULT_ADDR }}"  
      
          # Debug to check the Vault Address
          echo "Vault Address: $VAULT_ADDR"
      
          # Authenticate with Vault using the approle method, ignoring SSL verification if needed
          VAULT_SKIP_VERIFY=true vault write -address="$VAULT_ADDR" auth/approle/login role_id="$VAULT_ROLE_ID" secret_id="$VAULT_SECRET_ID" > vault-response.json
      
          # Extract Vault token from response
          VAULT_TOKEN=$(jq -r ".auth.client_token" vault-response.json)
      
          # Retrieve secrets from Vault using the token
          SPRING_DATASOURCE_URL=$(vault kv get -field=url -token="$VAULT_TOKEN" secret/myrealm/spring_datasource)
          SPRING_DATASOURCE_USERNAME=$(vault kv get -field=username -token="$VAULT_TOKEN" secret/myrealm/spring_datasource)
          SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=password -token="$VAULT_TOKEN" secret/myrealm/spring_datasource)
      
          # Set environment variables for the pipeline
          echo "SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD" >> $GITHUB_ENV
        env:
          VAULT_ADDR: "${{ secrets.VAULT_ADDR }}"  


      # Run the Docker container with the environment variables
      - name: Deploy to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            docker run -d --name my-app-container -p 8080:8080 \
              -e SPRING_DATASOURCE_URL="${{ env.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ env.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ env.SPRING_DATASOURCE_PASSWORD }}" \
              ${{ secrets.DOCKER_REGISTRY }}/my-app:${{ github.sha }}
