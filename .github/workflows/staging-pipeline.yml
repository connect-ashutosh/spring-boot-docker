name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download Trivy DB if cache is missed
      - name: Download Trivy DB
        run: trivy db pull || echo "Trivy DB already up to date."
     # Cache Trivy DB to avoid repeated downloads and rate limit
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy/db
          key: trivy-db-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-repo-results.sarif
          severity: CRITICAL
       
      # Install HashiCorp Vault
      - name: Install Vault
        run: |
          sudo apt update && sudo apt install -y gpg wget
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install -y vault

      # Set VAULT_ADDR environment variable
      - name: Set VAULT_ADDR
        run: echo "VAULT_ADDR=${{ secrets.VAULT_SERVER }}" >> $GITHUB_ENV

      # Authenticate with Vault
      - name: Authenticate with Vault
        run: |
          export VAULT_ADDR=${{ secrets.VAULT_SERVER }}
          export VAULT_SKIP_VERIFY=true
          vault login -no-print ${{ secrets.VAULT_TOKEN }}  # Use -no-print to avoid exposing the token


      # Combined step to fetch secrets, log in, build, and push Docker image
      - name: Build and Push Docker image
        run: |
          # Fetch secrets directly from Vault
          DOCKER_USERNAME=$(vault kv get -field=DOCKER_USERNAME secret/ci-secrets)
          DOCKER_PASSWORD=$(vault kv get -field=DOCKER_PASSWORD secret/ci-secrets)
          DOCKER_REGISTRY=$(vault kv get -field=DOCKER_REGISTRY secret/ci-secrets)
          echo "DOCKER_REGISTRY=${DOCKER_REGISTRY}" >> $GITHUB_ENV

          # Log in to DigitalOcean Container Registry
          echo "$DOCKER_PASSWORD" | docker login "$DOCKER_REGISTRY" -u "$DOCKER_USERNAME" --password-stdin
      
          # Build Docker image from Dockerfile in repo
          docker build \
            -t "$DOCKER_REGISTRY/my-app:${{ github.sha }}" \
            -t "$DOCKER_REGISTRY/my-app:latest" \
            .
      
          # Push the images
          docker push "$DOCKER_REGISTRY/my-app:${{ github.sha }}"
          docker push "$DOCKER_REGISTRY/my-app:latest"

      # Download Trivy DB if cache is missed
      - name: Download Trivy DB
        run: trivy db pull || echo "Trivy DB already up to date."
      # Run Trivy vulnerability scanner on Docker image      
      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/my-app:${{ github.sha }}
          format: sarif
          output: trivy-image-results.sarif
          scan-type: image 
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      # Combine SARIF files
      - name: Combine SARIF files
        run: |
          jq -s 'add' trivy-repo-results.sarif trivy-image-results.sarif > combined-results.sarif

      # Upload combined SARIF file
      - name: Upload combined SARIF file to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'combined-results.sarif'

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          sudo snap install doctl
          sudo snap connect doctl:kube-config                                                          

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}     
                
      # Save kubeconfig for the DigitalOcean Kubernetes cluster 
      - name: Save Kubeconfig
        run: |
          doctl kubernetes cluster kubeconfig save "$(vault kv get -field=CLUSTER_NAME secret/k8s-secrets)"

      - name: Fetch Database Secrets
        run: |
          # Fetch secrets from Vault
          SPRING_DATASOURCE_URL=$(vault kv get -field=SPRING_DATASOURCE_URL secret/database-secrets)
          sed -i "s|value: .*|value: \"$SPRING_DATASOURCE_URL\"|g" k8s/deployment.yaml
          SPRING_DATASOURCE_USERNAME=$(vault kv get -field=SPRING_DATASOURCE_USERNAME secret/database-secrets)
          sed -i "s|value: .*|value: \"$SPRING_DATASOURCE_USERNAME\"|g" k8s/deployment.yaml
          SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=SPRING_DATASOURCE_PASSWORD secret/database-secrets)
          sed -i "s|value: .*|value: \"$SPRING_DATASOURCE_PASSWORD\"|g" k8s/deployment.yaml

      # Apply the deployment
      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f k8s/deployment.yaml
